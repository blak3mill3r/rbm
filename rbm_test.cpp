/*
 * =====================================================================================
 *
 *       Filename:  rbm_test.cpp
 *
 *    Description:  simple test for rbm
 *
 *        Version:  0.01
 *        Created:  02/06/2009 02:58:13 PM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  Blake Miller (bnm), blak3mill3r@gmail.com
 *        Company:  Stupendous Software
 *
 * =====================================================================================
 */

#include <jack/jack.h>
#include <iostream>
#include <math.h>
#include "rbm.hpp"

using namespace rbm;

using std::cout;
using std::endl;

jack_port_t *input_port;
jack_client_t *client;
jack_default_audio_sample_t *samples_of_a = NULL;

typedef Neuron< jack_default_audio_sample_t > audio_neuron;
typedef Neurons< audio_neuron > audio_neurons;

typedef StochasticNeuron< float > StochasticNeuronf;
typedef Neurons< StochasticNeuronf > StochasticNeuronBlobf;

typedef RBM< audio_neurons, StochasticNeuronBlobf > audio_to_binary_rbm;
typedef RBM< StochasticNeuronBlobf, StochasticNeuronBlobf > binary_rbm;

/*
class MuxTrainer
{
  public:
  class Example {
    jack_default_audio_sample_t * audio;    // sound sample from synth, from MIDI notes generated by this class
    MusicConcepts concepts;                 // appropriate concept-neuron settings, according to the MIDI notes sent to the synth to generate audio, the above member
  };

  MuxTrainer(  );

  void train( const Example &example );
};
*/

int main(int argc, char ** argv) {
  float learning_rate = 0.7;
  jack_default_audio_sample_t *audio_sample = new jack_default_audio_sample_t[512];
  for( int i = 0; i < 512; ++i)
  {
    audio_sample[i] = sin(i * 20.0 / 512.0);
  }

  audio_neurons audio_perceptrons( 512 );
  cout << "made audio_perceptrons at " << &audio_perceptrons << endl;
  cout << "audio_perceptrons.num_connectable_neurons() = " << audio_perceptrons.num_connectable_neurons() << endl;

  audio_to_binary_rbm sub_net( &audio_perceptrons, 512, learning_rate );
  cout << "made sub_net at " << &sub_net << endl;
  cout << "sub_net.num_connectable_neurons() = " << sub_net.num_connectable_neurons() << endl;

  cout << "HERE WE GO THEN" << endl;
  audio_perceptrons.set_activation( audio_sample );
  cout << "randomize weights!\n";
  sub_net.randomize_weights();
  cout << "done! now TRAIN!!\n";
  sub_net.perceptual_learning(1);
  sub_net.debugify();
  cout << "debugify done!\n";

  //binary_rbm net( sub_net.upper , 512, learning_rate );
  //cout  << "made net at " << &net << endl;
  //cout << "net.num_connectable_neurons() = " << net.num_connectable_neurons() << endl;

  delete [] audio_sample;
}

